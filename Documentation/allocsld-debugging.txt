allocsld.so is implemented as a 'chain loader' which secretly loads the
'real' dynamic linker and gets it to link the program.

All this has the capacity to really confuse a debugger. A debugger
attached to allocsld.so would not know /a priori/ anything about other
binaries that get loaded.

Debuggers learn about dynamically linked libraries by finding a 'struct
r_debug' instance pointed to by the DT_DEBUG entry of the executable's
.dynamic section (or by a symbol named _r_debug).

So the short summary is that we give allocsld.so such a DT_DEBUG entry,
but point it at the 'struct r_debug' in the *real* dynamic linker. That
way, if a debugger looks in allocsld.so, thinking it the executable, it
will find the real link map.

It's not quite that easy. A debugger looking for a DT_DEBUG will also
expect to find a _dl_debug_state() function in the same binary (actually
it can have several names; see allocsld/chain.c). This is a no-op
function on which the debugger secretly sets a breakpoint; the dynamic
linker calls it whenever it loads or unloads something, so the debugger
can stay aware. In our case, the 'real' dynamic linker is doing all the
work and will happily call its own _dl_debug_state function, but the
debugger will not know to set a breakpoint on it because it might look
only at the 'apparent' dynamic linker, allocsld. We have no choice but to
define our own _dl_debug_state function. We can set the r_brk field
in the _r_debug, defined by the real dynamic linker, to point to our
own function. (It appears gdb is wrong to behave this way. A comment in
glibc's dl-debug.c attests: "The debugger is supposed to find this
function's address by examining the r_brk member of struct r_debug, but
GDB 4.15 in fact looks for this particular symbol name in the PT_INTERP
file.")

Note that simply symbol-overriding _dl_debug_state does not work. Even
though it has default (global) visibility so appears subject to overriding,
allocsld doesn't actually exist as far as the link map is concerned, so
defining our own there is no good. In any case, glibc's dynamic linker
seems to make internal calls to its own function, which are not overriddable.
And once we've "covered our tracks", the debugger will only find the "real"
dynamic linker anyway. Our solution is to overwrite the 'real' ld.so's
_dl_debug_state so that it calls ours. Since functions have 16-byte alignment
on x86-64, so we have 16 bytes to play with. We make the real ld.so
_dl_debug_state tail-call (jump) into ours in allocsld. Our function is empty
and just returns to the caller. Calling the ld.so's _dl_debug_state will
activate *both* functions, so we've covered both debugger-bases.
